// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lucaslmuller/technical-test/internal/app/device/repository (interfaces: IRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/lucaslmuller/technical-test/internal/app/device/domain/model"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(arg0 context.Context, arg1 *model.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIRepository) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIRepository)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIRepository) GetAll(arg0 context.Context) ([]model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRepository)(nil).GetAll), arg0)
}

// GetByBrand mocks base method.
func (m *MockIRepository) GetByBrand(arg0 context.Context, arg1 string) ([]model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBrand", arg0, arg1)
	ret0, _ := ret[0].([]model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBrand indicates an expected call of GetByBrand.
func (mr *MockIRepositoryMockRecorder) GetByBrand(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBrand", reflect.TypeOf((*MockIRepository)(nil).GetByBrand), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockIRepository) GetByID(arg0 context.Context, arg1 string) (*model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIRepositoryMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIRepository)(nil).GetByID), arg0, arg1)
}

// GetByState mocks base method.
func (m *MockIRepository) GetByState(arg0 context.Context, arg1 string) ([]model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByState", arg0, arg1)
	ret0, _ := ret[0].([]model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByState indicates an expected call of GetByState.
func (mr *MockIRepositoryMockRecorder) GetByState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByState", reflect.TypeOf((*MockIRepository)(nil).GetByState), arg0, arg1)
}

// Update mocks base method.
func (m *MockIRepository) Update(arg0 context.Context, arg1 *model.Device) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), arg0, arg1)
}
